= 1 (Титульный слайд)

Здравствуйте, я меня зовут Смирнов Егор, я студент 251 группы. Тема моей курсовой работы "Разработка ядра
клиент-серверного приложения для "Отработки" для андроида". Мой научный руководитель --- Батраева Инна Александровна

= 2 (Постановка задачи)
*Цель работы* --- разработка серверной части системы для приложения «Отработки»с REST API на .NET.

*Задачи:*
- Изучить принципы разработки серверных приложений на .NET.

- Спроектировать архитектуру серверной части.

- Реализовать API для управления пользователями, запросами на участие в мероприятиях.

- Обеспечить безопасность (аутентификация, авторизация)

= 3 (Технологический стек)
Технологический стек проекта на языке c\# и фреймворке .NET.

= 4 (Архитектура)
Архитектура серверной части проекта построена по принципу модульности, где каждый модуль (проект) отвечает за отдельный
аспект системы:

- Database: Содержит сущности используемые для взаимодействия с базой данных;
- Context: Содержит настройки DbContext и инкапсулирует логику взаимодействия с базой данных;
- Services: Реализует логику приложения;
- Controllers: Обрабатывает отправленные клиентом HTTP-запросы и возвращает ответы в формате JSON;

= 5 (Реализация)

= 6 (Вход в аккаунт)
Рассмотрим пример входа в аккаунт.

Клиент отправляет свои почту и пароль, а сервер возвращает токены.
- Access Token для аутентификации пользователя.
- Refresh Token для обновления токена.

= 7 (Ленты запросов (пользователь))
Реализованы 2 ленты запросов:
- Лента запросов для пользователя.
  - В ней отображаются все запросы, с полями: id запроса, адрес мероприятия, дата начала, дата окончания, количество очков
    за выполнение, максимальное количество участников, количество участников откликнувшихся на запрос, описание, статус
    запроса (выполнен или нет).


= 8 (Ленты запросов (администратор))
- Лента запросов для администратора.
  - В ней отображаются все запросы, с большим количеством полей, таких как:
		- id администратора создавшего запрос;
		- откликнувшиеся пользователи отображаются не колличеством очков, а списком их id;
		- сслыка на телеграм чат запроса, для связи дополнительного взаимодействия с участниками запроса.

= 9 (Возможность записаться на запрос) (до записи)

Реализована возможность записаться на запрос. Как видно из примера, список пользователей у запроса пуст до записи.

= 10 (Возможность записаться на запрос) (после записи)

После записи пользователь будет добавлен в список пользователей запроса.

= 11 (Возможность отказа от запроса) (после отказа от запроса)

Так же можно отказаться от запроса. После отказа пользователь будет удален из списка пользователей запроса.

= 12 (Начисления очков за выполненный запрос) (пример отправленного списка пользователей)

Реализовано начисление очков за выполненный запрос. Отправляется Id запроса и список пользователей, которым нужно начислить очки.

= 13 (Начисления очков за выполненный запрос) (пользователь до и после начисления очков)

Проверяется валидность списка пользователей и начисляются очки за выполненный запрос и увеличивается количество выполненных запросов пользователя.

= 14 (Начисления очков за выполненный запрос) (пример выполненного запроса)

После запрос становится выполненным.

= 15 (Итоги)
В рамках проделанной работы были:

- Изучены принципы разработки серверных приложений на .NET.

- Спроектирована архитектура серверной части.

- Реализована API для управления пользователями, запросами на участие в мероприятиях и получением очков за выполненный запрос.

- Процесс аутентификации и авторизации был реализован с применением JWT и хэширования BCrypt, что делает эти процессы безопаснее.

= 16 (Список использованных источников)

= 17 (Спасибо за внимание)
